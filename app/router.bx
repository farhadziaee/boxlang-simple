import classes.core.*;
import app.controllers.HomeController;

class {
    property name="rq" type="WebRequest";
    
    function init(required WebRequest rq) {
        this.rq = arguments.rq;
    }

    function route(){
        var path = CGI.query_string;
        
        var routers = [
            new WebRoute(
                path = [
                    "/",
                    "/home"
                ],
                rq = this.rq,
                index = _homeController().homeIndex
            ),
            new WebRoute(
                path = ["test"],
                rq = this.rq,
                index = _homeController().testIndex
            ),
            new WebRoute(
                path = ["/api/users"],
                rq = this.rq,
                index = _homeController().apiUsers,
                methods = "GET"
            ),
            new WebRoute(
                path = ["/api/users"],
                rq = this.rq,
                index = _homeController().apiAddUsers,
                methods = "POST"
            ),
            new WebRoute(
                path = ["/api/users/{id}"],
                rq = this.rq,
                index = _homeController().apiGetUser,
                methods = "GET"
            ),
            new WebRoute(
                path = ["/api/users/{id}"],
                rq = this.rq,
                index = _homeController().apiDeleteUser,
                methods = "DELETE"
            ),
        ];

        for(var i = 1; i <= arrayLen(routers); i++) {
            for(var j = 1; j <= arrayLen(routers[i].path); j++) {
                if(comparePath(path, routers[i].path[j])) {
                    var res = routers[i];
                    if(res.checkAllowMethod(CGI.request_method)) {
                        return res;
                    }
                }
            }
        }
        
        Throw "No route found for path: [# CGI.request_method #] # path #";
    }

    function _homeController() {
        return new HomeController();
    }

    boolean function comparePath(required string path1, required string path2) {
        path1 = path1.trim();
        path2 = path2.trim();
        path1 = ListFirst(path1, "?");
        path2 = ListFirst(path2, "?");
        
        if(Find("{",path2) > 0 && Find("}",path2) > 0) {
            var path1Arr = ListToArray(path1, "/");
            var path2Arr = ListToArray(path2, "/");

            if(arrayLen(path1Arr) != arrayLen(path2Arr)) {
                return false;
            } else {
                for(var i = 1; i <= arrayLen(path1Arr); i++) {
                    if(find("{",path2Arr[i]) > 0 && find("}",path2Arr[i]) > 0) {
                        var params = {};
                        var key = path2Arr[i].replace("{","").replace("}","");
                        params[key] = path1Arr[i];
                        this.rq.addParams(params);
                        path2Arr[i] = path1Arr[i];
                    }
                }
            }

            path2 = ArrayToList(path2Arr, "/");
            path1 = ArrayToList(path1Arr, "/");
        }

        if(len(path1) && path1[1] == '/') {
            path1 = Right(path1 , -1);
        }
        if(len(path2) && path2[1] == '/') {
            path2 = Right(path2 , -1);
        }
        if(len(path1) && path1[len(path1)] == '/') {
            path1 = Left(path1, - 1);
        }
        if(len(path2) && path2[len(path2)] == '/') {
            path2 = Left(path2, - 1);
        }

        uri1 = CreateObject("java", "java.net.URI").init(path1);
        uri2 = CreateObject("java", "java.net.URI").init(path2);


        return uri2.getPath() == uri1.getPath();
    }
}